/* tslint:disable */
/* eslint-disable */
/**
 * WebNotes API
 * API for managing notes in the WebNotes app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Note,
  NotePreview,
  NoteUpdate,
} from '../models/index';
import {
    NoteFromJSON,
    NoteToJSON,
    NotePreviewFromJSON,
    NotePreviewToJSON,
    NoteUpdateFromJSON,
    NoteUpdateToJSON,
} from '../models/index';

export interface NotesIdDeleteRequest {
    id: string;
}

export interface NotesIdGetRequest {
    id: string;
}

export interface NotesIdPutRequest {
    noteUpdate: NoteUpdate;
    id: string;
}

export interface NotesPostRequest {
    noteUpdate: NoteUpdate;
}

export interface NotesRecentGetRequest {
    limit?: number;
}

/**
 * 
 */
export class NotesApi extends runtime.BaseAPI {

    /**
     * Returns a list of note previews with truncated text.
     * Get all note previews
     */
    async noteAllPreviewsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NotePreview>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/note/all/previews`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NotePreviewFromJSON));
    }

    /**
     * Returns a list of note previews with truncated text.
     * Get all note previews
     */
    async noteAllPreviewsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NotePreview>> {
        const response = await this.noteAllPreviewsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Deletes a note from the system.
     * Delete a note by ID
     */
    async notesIdDeleteRaw(requestParameters: NotesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling notesIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/notes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a note from the system.
     * Delete a note by ID
     */
    async notesIdDelete(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notesIdDeleteRaw({ id: id }, initOverrides);
    }

    /**
     * Returns a full note by its ID.
     * Get a note by ID
     */
    async notesIdGetRaw(requestParameters: NotesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Note>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling notesIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/notes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoteFromJSON(jsonValue));
    }

    /**
     * Returns a full note by its ID.
     * Get a note by ID
     */
    async notesIdGet(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Note> {
        const response = await this.notesIdGetRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing note based on its ID.
     * Update an existing note
     */
    async notesIdPutRaw(requestParameters: NotesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Note>> {
        if (requestParameters['noteUpdate'] == null) {
            throw new runtime.RequiredError(
                'noteUpdate',
                'Required parameter "noteUpdate" was null or undefined when calling notesIdPut().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling notesIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/notes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NoteUpdateToJSON(requestParameters['noteUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoteFromJSON(jsonValue));
    }

    /**
     * Updates an existing note based on its ID.
     * Update an existing note
     */
    async notesIdPut(noteUpdate: NoteUpdate, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Note> {
        const response = await this.notesIdPutRaw({ noteUpdate: noteUpdate, id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new note and returns the created note object.
     * Create a new note
     */
    async notesPostRaw(requestParameters: NotesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Note>> {
        if (requestParameters['noteUpdate'] == null) {
            throw new runtime.RequiredError(
                'noteUpdate',
                'Required parameter "noteUpdate" was null or undefined when calling notesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/notes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NoteUpdateToJSON(requestParameters['noteUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoteFromJSON(jsonValue));
    }

    /**
     * Creates a new note and returns the created note object.
     * Create a new note
     */
    async notesPost(noteUpdate: NoteUpdate, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Note> {
        const response = await this.notesPostRaw({ noteUpdate: noteUpdate }, initOverrides);
        return await response.value();
    }

    /**
     * Returns a specified number of recently opened notes.
     * Get recently opened notes
     */
    async notesRecentGetRaw(requestParameters: NotesRecentGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Note>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/notes/recent`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NoteFromJSON));
    }

    /**
     * Returns a specified number of recently opened notes.
     * Get recently opened notes
     */
    async notesRecentGet(limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Note>> {
        const response = await this.notesRecentGetRaw({ limit: limit }, initOverrides);
        return await response.value();
    }

}
